{"version":3,"sources":["services/movie-searcher-api.js","images/noimage.jpg","components/Gallery/Gallery.module.css","components/Gallery/Gallery.js","pages/MoviePage/MoviePage.module.css","pages/MoviePage/MoviesPage.js"],"names":["BASE_URL","API_KEY","mainFetch","a","url","fetch","response","ok","json","Promise","reject","Error","fetchTrendings","page","fetchSearcMovie","query","fetchMovieDetails","id","fetchCast","fetchReview","module","exports","Gallery","poster","title","name","className","s","src","noimage","alt","text","MoviesPage","navigate","useNavigate","location","useLocation","useState","setQuery","movies","setMovies","setPage","allPages","setAllPages","searchQuery","URLSearchParams","search","get","currentPage","useEffect","getCurrentMoviesPage","trim","then","data","results","length","total_pages","toast","warning","catch","err","console","log","error","form","onSubmit","e","preventDefault","target","value","type","input","autoComplete","placeholder","btn","list","map","poster_path","item","to","state","from","label","count","onChange","_","num","sx","display","justifyContent","showFirstButton","showLastButton","renderItem","component","Link"],"mappings":"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","file":"static/js/movies-page.65c6038d.chunk.js","sourcesContent":["const BASE_URL = `https://api.themoviedb.org/3`;\r\nconst API_KEY = `?api_key=3beebdf74f4d418df005cba36fb7024f`;\r\n\r\nasync function mainFetch(url = '') {\r\n  const response = await fetch(url);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error('Not found'));\r\n}\r\n\r\nexport async function fetchTrendings(page) {\r\n  return await mainFetch(\r\n    `${BASE_URL}/trending/movies/day${API_KEY}&page=${page}`,\r\n  );\r\n}\r\n\r\nexport function fetchSearcMovie(query, page) {\r\n  return mainFetch(\r\n    `${BASE_URL}/search/movie${API_KEY}&query=${query}&page=${page}`,\r\n  );\r\n}\r\n\r\nexport function fetchMovieDetails(id) {\r\n  return mainFetch(`${BASE_URL}/movie/${id}${API_KEY}`);\r\n}\r\n\r\nexport function fetchCast(id) {\r\n  return mainFetch(`${BASE_URL}/movie/${id}/credits${API_KEY}`);\r\n}\r\n\r\nexport function fetchReview(id) {\r\n  return mainFetch(`${BASE_URL}/movie/${id}/reviews${API_KEY}`);\r\n}\r\n","export default __webpack_public_path__ + \"static/media/noimage.16383d75.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"poster\":\"Gallery_poster__1miTM\",\"text\":\"Gallery_text__3L7P9\"};","import React from 'react';\r\nimport s from './Gallery.module.css';\r\nimport noimage from '../../images/noimage.jpg';\r\n\r\nfunction Gallery({ poster, title, name }) {\r\n  return (\r\n    <>\r\n      <img\r\n        className={s.poster}\r\n        src={poster ? `https://www.themoviedb.org/t/p/w500${poster}` : noimage}\r\n        alt={title}\r\n      />\r\n      <h3 className={s.text}>{title ? title : name}</h3>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Gallery;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"MoviePage_form__2W-J2\",\"input\":\"MoviePage_input__2-Kj2\",\"btn\":\"MoviePage_btn__ECOwx\",\"list\":\"MoviePage_list__2HHnP\",\"item\":\"MoviePage_item__2QxSr\"};","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useNavigate, useLocation, Link } from 'react-router-dom';\r\nimport { Pagination, PaginationItem } from '@mui/material';\r\nimport { fetchSearcMovie } from 'services/movie-searcher-api';\r\nimport s from './MoviePage.module.css';\r\nimport Gallery from 'components/Gallery';\r\nimport { toast } from 'react-toastify';\r\n\r\nfunction MoviesPage() {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const [query, setQuery] = useState('');\r\n  const [movies, setMovies] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [allPages, setAllPages] = useState(0);\r\n\r\n  const searchQuery = new URLSearchParams(location.search).get('query');\r\n  const currentPage = new URLSearchParams(location.search).get('page');\r\n\r\n  useEffect(() => {\r\n    if (!searchQuery) {\r\n      return;\r\n    }\r\n\r\n    getCurrentMoviesPage(searchQuery, currentPage);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (query.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    getCurrentMoviesPage(query, page);\r\n  }, [query, page]);\r\n\r\n  const getCurrentMoviesPage = (query, page) => {\r\n    fetchSearcMovie(query, page)\r\n      .then(data => {\r\n        if (data.results.length > 0) {\r\n          setMovies(data.results);\r\n          setAllPages(data.total_pages);\r\n        } else {\r\n          toast.warning('Enter correct query');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        toast.error('Oops...something wrong');\r\n      });\r\n  };\r\n\r\n  const handleSearchForm = e => {\r\n    e.preventDefault();\r\n\r\n    if (e.target.query.value.trim() === '') {\r\n      toast.warning('Enter word for search');\r\n      return;\r\n    }\r\n\r\n    setQuery(e.target.query.value);\r\n    navigate({\r\n      ...location,\r\n      search: `query=${e.target.query.value}&page=${page}`,\r\n    });\r\n\r\n    e.target.query.value = '';\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={s.form} onSubmit={handleSearchForm}>\r\n        <input\r\n          type=\"text\"\r\n          className={s.input}\r\n          name=\"query\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"Enter word for search\"\r\n        ></input>\r\n        <button type=\"submit\" className={s.btn}></button>\r\n      </form>\r\n\r\n      {movies.length > 0 && (\r\n        <>\r\n          <ul className={s.list}>\r\n            {movies.map(({ id, poster_path, title, name }) => (\r\n              <li className={s.item} key={id}>\r\n                <Link\r\n                  to={`${id}`}\r\n                  state={{\r\n                    from: location,\r\n                    label: 'to Movies page',\r\n                  }}\r\n                >\r\n                  <Gallery poster={poster_path} title={title} name={name} />\r\n                </Link>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <Pagination\r\n            count={allPages}\r\n            page={page}\r\n            onChange={(_, num) => setPage(num)}\r\n            sx={{ display: 'flex', justifyContent: 'center' }}\r\n            showFirstButton\r\n            showLastButton\r\n            renderItem={item => (\r\n              <PaginationItem\r\n                component={Link}\r\n                to={`/movies?query=${query}&page=${item.page}`}\r\n                {...item}\r\n              />\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nMoviesPage.propTypes = {\r\n  query: PropTypes.string,\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number,\r\n      title: PropTypes.string,\r\n    }),\r\n  ),\r\n};\r\nexport default MoviesPage;\r\n"],"sourceRoot":""}